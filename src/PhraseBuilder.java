/*
Class: PhraseBuilder
Author: Samdine Murray
Created: 4/7/2023
Modified: 5/1/2023

Purpose: Puts together gramatically sensible phrases in English, using random words generated by WordGenerator. Takes input of the amount of syllables the phrase must be.

Attributes: -syllablesNeeded: int

Methods:	+buildLine(): String
			+getPhraseStructure(int): ArrayList<String>
			+sequenceLine(ArrayList<GenericWord>): String
			+distributeSyllables(ArrayList<String>): ArrayList<Integer>

*/

import java.util.ArrayList;
public class PhraseBuilder {

	// ATTRIBUTES
	private int syllablesNeeded;

	// METHODS
	public String buildLine() {
		WordGenerator wg = new WordGenerator();
		int structureType = (int) Math.round(Math.random() * 2);
		ArrayList<String> phraseStructure = getPhraseStructure(structureType);
		ArrayList<GenericWord> phrase = new ArrayList<>();
		ArrayList<Integer> wordSyllables = distributeSyllables(phraseStructure);
		for (int i = 0; i < phraseStructure.size(); i++) {
			GenericWord searchedWord = wg.searchWord(wordSyllables.get(i), phraseStructure.get(i));
			if (phraseStructure.get(i).equalsIgnoreCase("article")) {
				ArticleWord currentWordClasstype = new ArticleWord(searchedWord.getWord(), searchedWord.getSyllables(), searchedWord.getPartOfSpeech(), searchedWord.getPlural());
				phrase.add(currentWordClasstype);
			} else if (phraseStructure.get(i).equalsIgnoreCase("noun")) {
				NounWord currentWordClasstype = new NounWord(searchedWord.getWord(), searchedWord.getSyllables(), searchedWord.getPartOfSpeech(), searchedWord.getPlural());
				phrase.add(currentWordClasstype);
			} else if (phraseStructure.get(i).equalsIgnoreCase("verb")) {
				VerbWord currentWordClasstype = new VerbWord(searchedWord.getWord(), searchedWord.getSyllables(), searchedWord.getPartOfSpeech(), searchedWord.getPlural());
				phrase.add(currentWordClasstype);
			}else {
				OtherWord currentWordClasstype = new OtherWord(searchedWord.getWord(), searchedWord.getSyllables(), searchedWord.getPartOfSpeech(), searchedWord.getPlural());
				phrase.add(currentWordClasstype);
			}
		}
		return sequenceLine(phrase);
	}
	public ArrayList<String> getPhraseStructure(int structureType) {
		ArrayList<String> phraseStructure = new ArrayList<>();
		if (structureType == 0) {
			phraseStructure.add("Noun");
			phraseStructure.add("Verb");
			phraseStructure.add("Preposition");
			phraseStructure.add("Article");
			phraseStructure.add("Noun");
		}
		if (structureType == 1) {
			phraseStructure.add("Pronoun");
			phraseStructure.add("Verb");
			phraseStructure.add("Preposition");
			phraseStructure.add("Article");
			phraseStructure.add("Noun");
		}
		if (structureType == 2) {
			phraseStructure.add("Article");
			phraseStructure.add("Adjective");
			phraseStructure.add("Noun");
			phraseStructure.add("Verb");
		}
		return phraseStructure;
	}
	public String sequenceLine(ArrayList<GenericWord> line) {
		String sequencedPhrase = "";
		String tempWord = "";
		if (line.size() > 1) {
			tempWord = line.get(0).nextWordBehavior(line.get(1));
			sequencedPhrase = tempWord;
		}
		for (int i = 1; i < (line.size()-1); i++) {
			line.get(i).nextWordBehavior(line.get((i+1)));
			tempWord = line.get(i).previousWordBehavior(line.get((i-1)));
			sequencedPhrase = sequencedPhrase + " " + tempWord;
		}
		if (line.size() > 1) {
			tempWord = line.get((line.size()-1)).previousWordBehavior(line.get((line.size()-2)));
		}
		else {
			tempWord = line.get((line.size()-1)).getWord();
		}
		sequencedPhrase = sequencedPhrase + " " + tempWord;
		return sequencedPhrase;
	}
	public ArrayList<Integer> distributeSyllables(ArrayList<String> phrase) {
		ArrayList<Integer> syllablesForWords = new ArrayList<>();
		for (int i = 0; i < phrase.size(); i++) {
			syllablesForWords.add(1);
		}
		int syllableExcess = syllablesNeeded%phrase.size();
		for (int j = 0; j < syllableExcess; j++) {
			int randInt = (int)Math.round(Math.random() * (syllablesForWords.size() - 1));
			boolean syllablesReplaced = false;
			while (!syllablesReplaced) {
				if (syllablesForWords.get(randInt) < 4 && !phrase.get(randInt).equalsIgnoreCase("Article") && !phrase.get(randInt).equalsIgnoreCase("Pronoun")) {
					syllablesForWords.set(randInt, syllablesForWords.get(randInt)+1);
					syllablesReplaced = true;
				} else {
					randInt = (int)Math.round(Math.random() * (syllablesForWords.size() - 1));
				}
			}
		}
		return syllablesForWords;
	}

	// SETTERS & GETTERS
	public void setSyllablesNeeded(int syllablesNeeded) {
		this.syllablesNeeded = syllablesNeeded;
	}
}